@page "/machine-management"
@attribute [Authorize(Roles = $"{RoleNames.Admin},{RoleNames.Manager},{RoleNames.Supervisor}")]

@using Cascadia_MetalFlow_System.Data
@using Cascadia_MetalFlow_System.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService

<PageTitle>Machine Management</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Machine Management</MudText>

@if (_loading)
{
    <MudPaper Class="pa-4">
        <MudSkeleton />
        <MudSkeleton />
        <MudSkeleton />
    </MudPaper>
}
else
{
    <MudTable Items="@_machines" Hover="true" SortLabel="Sort By">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateMachine">Create Machine</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Branch</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <NoRecordsContent>
            <MudText>No machines found.</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateMachine" Class="mt-4">Create a Machine</MudButton>
        </NoRecordsContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Branch">@context.CompanyBranch?.Name</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => EditMachine(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteMachine(context))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private bool _loading = true;
    private IEnumerable<Machine> _machines = new List<Machine>();

    protected override async Task OnInitializedAsync()
    {
        await LoadMachines();
    }

    private async Task LoadMachines()
    {
        _loading = true;
        using var context = await DbFactory.CreateDbContextAsync();
        _machines = await context.Machines.Include(m => m.CompanyBranch).ToListAsync();
        _loading = false;
    }

    private async Task CreateMachine()
    {
        var dialog = await DialogService.ShowAsync<AddEditMachineDialog>("Create Machine");
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadMachines();
            StateHasChanged();
        }
    }

    private async Task EditMachine(Machine machine)
    {
        var parameters = new DialogParameters { ["Machine"] = machine };
        var dialog = await DialogService.ShowAsync<AddEditMachineDialog>("Edit Machine", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadMachines();
            StateHasChanged();
        }
    }

    private async Task DeleteMachine(Machine machine)
    {
        var parameters = new DialogParameters { ["Machine"] = machine };
        var dialog = await DialogService.ShowAsync<DeleteMachineDialog>("Delete Machine", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadMachines();
            StateHasChanged();
        }
    }
}
